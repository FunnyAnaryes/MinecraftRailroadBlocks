plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
   //accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        //convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        //mixinConfig "railroadblocksaddon-common.mixins.json"
        //mixinConfig "railroadblocksaddon.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    //shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }

}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_api_version}"

    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transitive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand  minecraft_version: minecraft_version,
                minecraft_version_range: minecraft_version_ranged,
                forge_version: forge_version,
                forge_version_range: forge_version_range,
                architectury_version_range: architectury_api_version_range,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_license: license,
                mod_version: mod_version,
                mod_authors: mod_authors,
                mod_credits: mod_credits,
                mod_description: mod_description,
                mod_issue_tracker: mod_issues,
                mod_homepage: mod_homepage,
                mod_update: mod_update
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
