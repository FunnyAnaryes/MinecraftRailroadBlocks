plugins {
	id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
	    canBeResolved = true
	    canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "me.shedaniel:architectury-fabric:$rootProject.architectury_api_version"

    // Mod Menu. This isn't required and is for testing convenience.
    modImplementation("com.terraformersmc:modmenu:$rootProject.mod_menu_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    filesMatching('fabric.mod.json') {
        expand  architectury_version_range: architectury_api_version_range_json,
		        fabric_version_range: fabric_loader_version_range,
		        fabric_api_version: fabric_api_version,
		        java: java_version,
		        minecraft_version_range: minecraft_version_range_json,
		        mod_id: mod_id,
		        mod_name: mod_name,
		        authors: mod_authors,
		        credits: mod_credits,
		        description: mod_description,
		        icon: icon_json,
		        license: license,
		        version: mod_version,
		        homepage: homepage,
		        issues: issues,
		        sources: sources
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
