plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    filesMatching('META-INF/neoforge.mods.toml') {
        expand  minecraft_version: minecraft_version,
                minecraft_version_range: minecraft_version_range,
                neoforge_version: neoforge_version,
                neoforge_version_range: neoforge_version_range,
                neo_loader_version_range: neo_loader_version_range,
                architectury_version_range: architectury_api_version_range,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_license: license,
                mod_version: mod_version,
                mod_authors: mod_authors,
                mod_credits: mod_credits,
                mod_description: mod_description,
                mod_issue_tracker: mod_issues,
                mod_homepage: mod_homepage,
                mod_update: mod_update
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
