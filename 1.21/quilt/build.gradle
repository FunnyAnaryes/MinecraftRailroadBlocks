plugins {
    id "com.github.johnrengelman.shadow"
}

repositories {
    maven {
        name = 'Quilt'
        url = 'https://maven.quiltmc.org/repository/release/'
    }
}

architectury {
    platformSetupLoomIde()
    loader('quilt')
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    //shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:$rootProject.quilt_loader_version"

    // Quilt Standard Libraries and QSL.
    //modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$rootProject.quilted_fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation("dev.architectury:architectury-fabric:$rootProject.architectury_api_version") {
        // We must not pull Fabric Loader and Fabric API from Architectury Fabric.
        exclude group: 'net.fabricmc'
        exclude group: 'net.fabricmc.fabric-api'
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    filesMatching('quilt.mod.json') {
        expand  minecraft_version_range: minecraft_version_ranged,
                fabric_version_range: fabric_loader_version_range,
                fabric_api_version: fabric_api_version,
                architectury_version_range: architectury_api_version_ranged,
                maven_group: maven_group,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_license: license,
                mod_version: mod_version,
                mod_authors: mod_authors,
                mod_credits: mod_credits,
                mod_description: mod_description
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
